#!/usr/bin/env python3
# © Copyright CERN, Riga Technical University and University of Liverpool 2020.
# All rights not expressly granted are reserved. 
# 
# This file is part of hev-sw.
# 
# hev-sw is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public Licence as published by the Free
# Software Foundation, either version 3 of the Licence, or (at your option)
# any later version.
# 
# hev-sw is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public Licence
# for more details.
# 
# You should have received a copy of the GNU General Public License along
# with hev-sw. If not, see <http://www.gnu.org/licenses/>.
# 
# The authors would like to acknowledge the much appreciated support
# of all those involved with the High Energy Ventilator project
# (https://hev.web.cern.ch/).


# streamline arduino firmware upgrades for hev
#
# On first installation run:
#     arduino-cli core update-index
#     arduino-cli board list
# Now install whatever the correct "Core" is for the board e.g.:
#     arduino-cli core install arduino:samd
#
# Author: Dónal Murray

import argparse
import serial
import subprocess

# status file location
logname = '/tmp/ard_upgrade.log'


def statuslog(state='idle', progress=0, errbool=False, errmsg=''):
    # fn to log current status. progress percentage not implemented yet (if ever)
    with open(str(logname), 'w') as tmpfile:
        tmpfile.write(
            f'{{"firmware_update_status":"{state}", "percent":{progress}, "error":{errbool}, "error_reason": "{errmsg}"}}\n')


if __name__ == "__main__":
    # parse arguments
    parser = argparse.ArgumentParser(
        description='Update firmware on Arduino device.\nUsage:\n    ard_upgrade path/to/fwfile /dev/ttyUSBX')
    parser.add_argument(
        'fwfile', help='firmware file location in arduino project folder (must have same name)')
    parser.add_argument('arduino_addr', help='device to program')

    args = parser.parse_args()

    fwfile = args.fwfile

    # find arduino in /dev and its FBQN
    print(f"Checking firmware {fwfile}/{fwfile.split('/')[-1]}.ino exists")
    try:
        statuslog('device', 0, False, '')
        ardlist = subprocess.check_output(
            'arduino-cli board list'.split()).decode('utf-8')
        arduino_addr = ardlist.split('\n')[1].split()[0]
        ardfbqn = ardlist.split('\n')[1].split()[-1-1]
    except (subprocess.CalledProcessError, IndexError) as e:
        if e == IndexError:
            # arduino-cli ran but found nothing
            print('Could not find device')
            statuslog('device', 0, True, 'Could not find device')
        else:
            # arduino-cli failed
            print('Failed to run arduino-cli')
            statuslog('device', 0, True, 'Failed to run arduino-cli')
        exit(4)
    statuslog('device', 100, False, '')

    # Check fwfile exists and can be opened for reading
    print(f"Checking firmware {fwfile}/{fwfile.split('/')[-1]}.ino exists")
    try:
        statuslog('file', 0, False, '')
        f = open(f"{fwfile}/{fwfile.split('/')[-1]}.ino", 'r')
    except IOError:
        print('File cannot be opened for reading. Check the file exists.')
        statuslog('file', 0, True,
                  'File cannot be opened for reading. Check the file exists.')
        exit(1)
    statuslog('file', 100, False, '')

    # compile
    print(f"Compiling firmware {fwfile}")
    try:
        statuslog('compiling', 0, False, '')
        subprocess.run(
            f'arduino-cli compile --fqbn {ardfbqn} {fwfile}'.split())
    except subprocess.CalledProcessError:
        print('Failed to compile design')
        statuslog('compiling', 0, True, 'Failed to compile design')
        exit(2)
    statuslog('compiling', 100, False, '')

    # upload to device
    print(f"Programming {arduino_addr} with firmware {fwfile}")
    statuslog('uploading', 0, False, '')
    try:
        subprocess.run(
            f'arduino-cli upload -p {arduino_addr} --fqbn {ardfbqn} {fwfile}'.split())
    except subprocess.CalledProcessError:
        print('Failed to upload design to board')
        statuslog('uploading', 0, True, 'Failed to upload design to board')
        exit(3)
    statuslog('uploading', 100, False, '')
